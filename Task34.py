# Задача 34: Винни-Пух попросил Вас посмотреть, есть ли в его стихах ритм. 
# Поскольку разобраться в его кричалках не настолько просто, насколько легко он их придумывает,
# Вам стоит написать программу. Винни-Пух считает, что ритм есть, если число слогов
# (т.е. число гласных букв) в каждой фразе стихотворения одинаковое.
# Фраза может состоять из одного слова, если во фразе несколько слов, 
# то они разделяются дефисами. Фразы отделяются друг от друга пробелами.
# Написать функцию, которая принимает строку текста и проверяет ее ритм (по Винни-Пуху)
# Если ритм есть, функция возвращает True, иначе возвращает False
# Примеры/Тесты:
#     <function_name>("пара-ра-рам рам-пам-папам па-ра-па-дам") -> True
#     <function_name>("пара-ра-рам рам-пум-пупам па-ре-по-дам") -> True
#     <function_name>("пара-ра-рам рам-пуум-пупам па-ре-по-дам") -> False
#     <function_name>("Трам-пара-папам-парам-па-пам-пам-па Пум-пурум-пу-пурум-трам-пам-па") -> False
#     <function_name>("Пам-парам-пурум Пум-пурум-карам") -> True
# Примечание.
# Подумайте об эффективности алгоритма. Какие структуры данных будут более эффективны по скорости.
# Алгоритм должен работать так, чтобы не делать лишних проверок.
# Подумайте, возможно некоторые проверки не нужны.
# (*) Усложнение.
# Функция имеет параметр, который определяет, надо ли возвращать
# полную информацию о кол-ве гласных букв в фразах. Эта информация возвращается в виде списка словарей.
# Каждый элемент списка(словарь) соответствует фразе.

# Базовое решение

def rhythm_verse(str_n):
    vowel_letters = "аеёиоуыюэя"
    new_str = str_n.split()
    list_1 = []
    count = 0
    for i in range(len(new_str)):
        for j in range(len(new_str[i])):
            if new_str[i][j] in vowel_letters: count += 1
        list_1.append(count)
        count = 0
    for idx in range(1, len(list_1)):
        if list_1[idx] != list_1[idx - 1]:
            return False
        return True

print(rhythm_verse("пара-ра-рам рам-пам-папам па-ра-па-дам"))
print(rhythm_verse("пара-ра-рам рам-пум-пупам па-ре-по-дам"))
print(rhythm_verse("пара-ра-рам рам-пуум-пупам па-ре-по-дам"))
print(rhythm_verse("Трам-пара-папам-парам-па-пам-пам-па Пум-пурум-пу-пурум-трам-пам-па"))
print(rhythm_verse("Пам-парам-пурум Пум-пурум-карам"))

# (*) Усложнение.

# def how_many_letters(str_n):
#     vowel_letters = "аеёиоуыюэя"
#     dic_1 = {}
#     for i in str_n:
#         if i in vowel_letters:
#             if i in dic_1:
#                 dic_1[i] += 1
#             else:
#                 dic_1[i] = 1
#     return dic_1

# def rhythm_verse(str_n):
#     new_str = str_n.split()
#     result = list(map(how_many_letters, new_str))
#     return result

# print(rhythm_verse("пара-ра-рам рам-пам-папам па-ра-па-дам"))
# print(rhythm_verse("пара-ра-рам рам-пум-пупам па-ре-по-дам"))
# print(rhythm_verse("пара-ра-рам рам-пуум-пупам па-ре-по-дам"))
# print(rhythm_verse("Трам-пара-папам-парам-па-пам-пам-па Пум-пурум-пу-пурум-трам-пам-па"))
# print(rhythm_verse("Пам-парам-пурум Пум-пурум-карам"))

# ("пара-ра-рам рам-пам-папам па-ра-па-дам", False) -> True
# ("пара-ра-рам рам-пам-папам па-ра-па-дам", True) -> (True, [{'а': 4}, {'а': 4}, {'а': 4}])
# ("пара-ра-рам рам-пум-пупам па-ре-по-дам") -> (True, [{'а': 4}, {'а': 2, 'у': 2}, {'а': 2, 'е': 1, 'о': 1}])
# ("пара-ра-рам рам-пуум-пупам па-ре-по-дам") -> (False, [{'а': 4}, {'а': 2, 'у': 3}])
# ("Трам-пара-папам-парам-па-пам-пам-па Пум-пурум-пу-пурум-трам-пам-па") -> (False, [{'а': 11}, {'у': 6, 'а': 3}])
# ("Пам-парам-пурум Пум-пурум-карам") -> (True, [{'а': 3, 'у': 2}, {'у': 3, 'а': 2}])